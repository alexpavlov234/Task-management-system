@page "/Calendar"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.PdfExport
@using Task_management_system.Areas.Identity
@using Task_management_system.Data
@using Task_management_system.Interfaces
@using Task_management_system.Models
@using Task_management_system.Pages
@using Syncfusion.Blazor.Schedule
@using Task_management_system.Pages.Issues
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject IKeyValueService keyValueService
@inject IProjectService projectService
@inject IUserService userService
@inject IIssueService IssueService
@attribute [Authorize(Roles = "Admin, User")]

<div class="content-wrapper">


    <div>

        <div class="frame container">
            <img class="banner" src="img/iStock-1203930843.jpg" alt="Banner">
            <div class="bottom-left">

                <h3>Календар</h3>
                @*<nav class="navbar navbar-expand">
                <!-- Left navbar links -->
                <ul class="navbar-nav float">
                <li class="nav-item d-none d-sm-inline-block">
                <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="AddNewTaskClickHandler">Новa задача</button>


                </li>
                <li class="nav-item d-none d-sm-inline-block">
                &nbsp;
                </li>
                </ul>
                </nav>*@
            </div>
        </div>

        <div class="m-3">
            <SfSchedule TValue="Issue" Height="650px" @bind-SelectedDate="@CurrentDate" CurrentView="View.Month">
                <ScheduleTemplates>
                    <EditorTemplate>
                        <IssueModal CallbackAfterSubmit="UpdateAfterIssueModalSubmitAsync" />
                    </EditorTemplate>
                </ScheduleTemplates>
                <ScheduleEventSettings DataSource="@issues"></ScheduleEventSettings>
                <ScheduleViews>
                    <ScheduleView Option="View.Day"></ScheduleView>
                    <ScheduleView Option="View.Week"></ScheduleView>
                    <ScheduleView Option="View.WorkWeek"></ScheduleView>
                    <ScheduleView Option="View.Month"></ScheduleView>
                    <ScheduleView Option="View.Agenda"></ScheduleView>
                </ScheduleViews>
            </SfSchedule>
        </div>
    </div>
</div>





<style>
   

    .e-popup-footer {
        display: none !important;
    }
</style>

@code {
    DateTime CurrentDate = DateTime.Now;
    //https://learn.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-7.0

    private List<Issue> issues { get; set; }

    private IssueModal taskModal = new IssueModal();



    protected async override Task OnInitializedAsync()
    {
        issues = IssueService.GetAllIssues();


    }
    //private async Task AddNewTaskClickHandler()
    //{

    //    taskModal.OpenDialog(new Issue { Status = "Нова", Assignee = await userService.GetLoggedUser(), Subtasks = new List<Subtask>(), Location = "", RecurrenceException = "", RecurrenceRule = "", RecurrenceID = 0 });
    //}
    //private async Task AddIssueToProject(Project project)
    //{
    //    taskModal.OpenDialog(new Issue { Status = "Нова", Project = project, Assignee = await userService.GetLoggedUser(), Subtasks = new List<Subtask>(), Location = "", RecurrenceException = "", RecurrenceRule = "", RecurrenceID = 0 });
    //}
    private async Task UpdateAfterIssueModalSubmitAsync()
    {
        issues = IssueService.GetAllIssues();
        this.StateHasChanged();
    }
    //private async Task DeleteIssue(Issue issue)
    //{

    //    IssueService.DeleteIssue(issue);

    //    projects = projectService.GetAllProjects();
    //    this.StateHasChanged();

    //}

    //private async Task EditIssue(Issue issue)
    //{
    //    taskModal.OpenDialog(issue);
    //      managementModal.OpenDialog(applicationUser);
    //}

}