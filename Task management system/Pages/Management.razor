@page "/Management"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Syncfusion.Blazor.Popups
@using Syncfusion.PdfExport
@using Task_management_system.Areas.Identity
@using Task_management_system.Data
@using Task_management_system.Pages.Common
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@attribute [Authorize(Roles = "Admin")]


<div class="frame container">
    <img class="banner" src="img/iStock-1203930843.jpg" alt="Banner">
    <div class="bottom-left">

        <h3>Потребители</h3>
        <nav class="navbar navbar-expand">
            <!-- Left navbar links -->
            <ul class="navbar-nav float">
                <li class="nav-item d-none d-sm-inline-block">

                    <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="AddNewDocumentClickHandler" disabled="@(this.DisableAllFields)">Нов потребител</button>

                </li>
                <li class="nav-item d-none d-sm-inline-block">
                    &nbsp;
                </li>
            </ul>
        </nav>
    </div>
</div>

<div class="card-body">
    <div class="row">
        <div class="col-sm-12">
            <SfGrid ID="usersGrid" DataSource="users" AllowSorting="true" AllowFiltering=true EnableAltRow="true" EnableHover="false"
                    AllowTextWrap="true" @ref="usersGrid" AllowSelection="true" Toolbar="@(new List<string>() { "ExcelExport", "PdfExport" })"
                    AllowExcelExport="true" AllowPdfExport="true" AllowPaging="true">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                <GridPageSettings PageCount="5" PageSize=20 PageSizes="true"></GridPageSettings>
                <GridEvents OnToolbarClick="ToolbarClick" TValue="ApplicationUser"></GridEvents>
                <GridColumns>
                    <GridColumn Width="40px">
                        <Template>
                            <SfTooltip Position="Position.BottomCenter" Content="Редактиране" OpensOn="Hover">
                                <button type="button" class="btn btn-outline-warning waves-effect md-trigger" @onclick="(() => EditUser(context as ApplicationUser))">
                                    <i class="fa-solid fa-pen-to-square"></i>
                                </button>
                            </SfTooltip>
                        </Template>
                    </GridColumn>
                    <GridColumn Width="40px">
                        <Template>
                            <SfTooltip Position="Position.BottomCenter" Content="Изтриване" OpensOn="Hover">
                                <button type="button" class="btn btn-outline-danger waves-effect md-trigger" @onclick="(() => DeleteUser(context as ApplicationUser))">
                                    <i class="fa-solid fa-trash"></i>
                                </button>
                            </SfTooltip>
                        </Template>
                    </GridColumn>


                    <GridColumn Field=@nameof(ApplicationUser.UserName) HeaderText="Потребителско име" IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(ApplicationUser.FirstName) HeaderText="Име" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(ApplicationUser.LastName) HeaderText="Фамилия" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(ApplicationUser.Email) HeaderText="Имейл" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(ApplicationUser.PhoneNumber) HeaderText="Телефон" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

<ManagementModal @ref="managementModal" CallbackAfterSubmit="UpdateAfterManagementModalSubmitAsync" />

@code {
    //https://learn.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-7.0



    private bool documentDeleteConfirmed = false;
    private bool showDocumentConfirmDialog = false;
    private ManagementModal managementModal = new ManagementModal();
    private SfGrid<ApplicationUser> usersGrid = new SfGrid<ApplicationUser>();
    private async Task UpdateAfterManagementModalSubmitAsync()
    {
        var users = UserService.GetAllUsers();
        var itemToRemove = users.Remove(users.Single(r => r.UserName == httpContextAccessor.HttpContext.User.Identity.Name));
        var roles = roleManager.Roles.ToList();
        this.users = users;
        this.roles = roles;

        await this.usersGrid.Refresh();
        this.StateHasChanged();
    }
    [Parameter]
    public bool DisableWhenProcedureIsCompleted { get; set; }

    [Parameter]
    public bool DisableAllFields { get; set; }


    [Inject]
    public IJSRuntime JsRuntime { get; set; }
    [Inject]
    public IUserService UserService { get; set; }


    public List<IdentityRole> roles { get; set; }
    public List<ApplicationUser> users { get; set; }

    public int RowCounter = 0;
    SfGrid<ApplicationUser> sfGrid { get; set; }
    [Inject]
    private Context context { get; set; }
    [Inject]
    private IHttpContextAccessor httpContextAccessor { get; set; }
    private async Task AddNewDocumentClickHandler()
    {
        managementModal.OpenDialog(new ApplicationUser());
    }
    private async Task DeleteUser(ApplicationUser applicationUser)
    {

        await UserService.DeleteApplicationUser(applicationUser);
        var users = UserService.GetAllUsers();
        var itemToRemove = users.Remove(users.Single(r => r.UserName == httpContextAccessor.HttpContext.User.Identity.Name));
        var roles = roleManager.Roles.ToList();
        this.users = users;
        this.roles = roles;
        this.StateHasChanged();

    }

    private async Task EditUser(ApplicationUser applicationUser)
    {

        managementModal.OpenDialog(applicationUser);
    }

    protected async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "documentsGrid_pdfexport")
        {
            int temp = usersGrid.PageSettings.PageSize;
            usersGrid.PageSettings.PageSize = users.Count();
            await usersGrid.Refresh();
            PdfExportProperties ExportProperties = new PdfExportProperties();

            List<GridColumn> ExportColumns = new List<GridColumn>();
#pragma warning disable BL0005

            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.UserName), HeaderText = "Потребителско име", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.FirstName), HeaderText = "Име", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.LastName), HeaderText = "Фамилия", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.Email), HeaderText = "Имейл", Width = "80", TextAlign = TextAlign.Left });

#pragma warning restore BL0005

            ExportProperties.Columns = ExportColumns;
            ExportProperties.PageOrientation = PageOrientation.Landscape;
            ExportProperties.IncludeTemplateColumn = true;
            PdfTheme Theme = new PdfTheme();
            PdfThemeStyle RecordThemeStyle = new PdfThemeStyle()
                {
                    Font = new PdfGridFont() { IsTrueType = true, FontStyle = PdfFontStyle.Regular, FontFamily = FontFamilyPDF.fontFamilyBase64String }
                };

            PdfThemeStyle HeaderThemeStyle = new PdfThemeStyle()
                {
                    Font = new PdfGridFont() { IsTrueType = true, FontStyle = PdfFontStyle.Bold, FontFamily = FontFamilyPDF.fontFamilyBase64String }
                };
            Theme.Record = RecordThemeStyle;
            Theme.Header = HeaderThemeStyle;

            ExportProperties.Theme = Theme;
            ExportProperties.FileName = $"Потребители.pdf";
            usersGrid.PageSettings.PageSize = temp;
            await usersGrid.Refresh();
            await this.usersGrid.ExportToPdfAsync(ExportProperties);

        }
        else if (args.Item.Id == "usersGrid_excelexport")
        {
            ExcelExportProperties ExportProperties = new ExcelExportProperties();
            List<GridColumn> ExportColumns = new List<GridColumn>();
#pragma warning disable BL0005
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.UserName), HeaderText = "Потребителско име", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.FirstName), HeaderText = "Име", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.LastName), HeaderText = "Фамилия", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.Email), HeaderText = "Имейл", Width = "80", TextAlign = TextAlign.Left });

#pragma warning restore BL0005

            ExportProperties.Columns = ExportColumns;
            ExportProperties.FileName = $"Потребители.xlsx";
            await this.usersGrid.ExportToExcelAsync(ExportProperties);
        }
    }
    protected async override Task OnInitializedAsync()
    {
        var users = UserService.GetAllUsers();
        var itemToRemove = users.Remove(users.Single(r => r.UserName == httpContextAccessor.HttpContext.User.Identity.Name));
        var roles = roleManager.Roles.ToList();
        this.users = users;
        this.roles = roles;
    }

    public async Task<int> GetRowCounter(IdentityRole val)
    {
        RowCounter = roles.IndexOf(val);
        return RowCounter + 1;
    }




}
