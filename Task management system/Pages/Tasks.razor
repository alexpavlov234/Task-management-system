@page "/Тasks"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.PdfExport
@using Task_management_system.Areas.Identity
@using Task_management_system.Data
@using Task_management_system.Interfaces
@using Task_management_system.Models
@using Task_management_system.Pages.Common
@using Task_management_system.Pages
@using Task_management_system.Pages.Shared
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject IKeyValueService keyValueService
@inject IProjectService projectService
@inject IUserService userService
@inject IIssueService IssueService
@attribute [Authorize(Roles = "Admin")]

<div class="content-wrapper">


    <div>

        <div class="frame container">
            <img class="banner" src="img/iStock-1203930843.jpg" alt="Banner">
            <div class="bottom-left">

                <h3>Задачи</h3>
                <nav class="navbar navbar-expand">
                    <!-- Left navbar links -->
                    <ul class="navbar-nav float">
                        <li class="nav-item d-none d-sm-inline-block">
                            <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="AddNewTaskClickHandler">Новa задача</button>


                        </li>
                        <li class="nav-item d-none d-sm-inline-block">
                            &nbsp;
                        </li>
                    </ul>
                </nav>
            </div>
        </div>

        <div class="m-3">
            <div class="row m-0">
                <div class="col-sm-12">

                    <div class="project-issue-list">

                        @foreach (var project in projects)
                        {
                            <CollapsibleCard>
                                <CardHeader>

                                    <li class="list-group-item rounded d-flex justify-content-between align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px; background-color: #f8f8ff">
                                        <div style="width: 200px">
                                            @project.ProjectName
                                        </div>
                                        <div class="vr"></div>
                                        <div class="progress" style="width: 220px; border-radius: 20.25rem;">
                                            <div class="progress-bar" role="progressbar" aria-label="Example with label" style="width: 25%; background-color: #4f9b00" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                                        </div>
                                        <label style="color: gray">@(project.Tasks == null ? 0 : project.Tasks.Where(x => x.Status == "Затворена").Count())/@(project.Tasks == null ? 0 : project.Tasks.Count()) завършени задачи </label>
                                        <div class="vr"></div>

                                        <div style="display: flex">
                                            <SfTooltip Position="Position.BottomCenter" Content="Нова задача" OpensOn="Hover">
                                                <button type="button" class="btn btn-outline-primary waves-effect md-trigger m-1" @onclick="(() => AddIssueToProject(project))">
                                                    <i class="fa-solid fa-plus"></i>
                                                </button>
                                            </SfTooltip>
                                        </div>

                                    </li>






                                </CardHeader>
                                <CardBody>
                                    <ul class="list-group">
                                        @foreach (var task in (project.Tasks == null ? new List<Issue>() : project.Tasks))
                                        {

                                            <li class="list-group-item rounded d-flex justify-content-between align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px">
                                                <div style="width: 200px">
                                                    @task.Subject
                                                </div>
                                                <div class="vr"></div>
                                                @if (task.Subtasks != null)
                                                {
                                                    <div class="progress" style="width: 220px; border-radius: 20.25rem;">
                                                        <div class="progress-bar" role="progressbar" aria-label="Example with label" style="width: 25%; background-color: #4f9b00" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100"></div>
                                                    </div>

                                                    <label style="color: gray">@(task.Subtasks.Where(x => x.Status == "Завършена").Count())/@(task.Subtasks.Count()) завършени подзадачи </label>
                                                }
                                                <div class="vr"></div>

                                                <div style="display: flex">
                                                    <SfTooltip Position="Position.BottomCenter" Content="Редактиране" OpensOn="Hover">
                                                        <button type="button" class="btn btn-outline-warning waves-effect md-trigger m-1" @onclick="(() => EditIssue(task))">
                                                            <i class="fa-solid fa-pen-to-square"></i>
                                                        </button>
                                                    </SfTooltip>
                                                    <SfTooltip Position="Position.BottomCenter" Content="Изтриване" OpensOn="Hover">
                                                        <button type="button" class="btn btn-outline-danger waves-effect md-trigger m-1" @onclick="(() => DeleteIssue(task))">
                                                            <i class="fa-solid fa-trash"></i>
                                                        </button>
                                                    </SfTooltip>
                                                </div>

                                            </li>
                                        }
                                    </ul>
                                </CardBody>
                            </CollapsibleCard>
                        }


                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<TasksModal @ref="taskModal" CallbackAfterSubmit="UpdateAfterManagementModalSubmitAsync" />


@code {
    //https://learn.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-7.0

    private List<Project> projects { get; set; }

    private TasksModal taskModal = new TasksModal();



    protected async override Task OnInitializedAsync()
    {

        projects = projectService.GetAllProjects();

    }
    private async Task AddNewTaskClickHandler()
    {

        taskModal.OpenDialog(new Issue { Status = "Нова", Assignee = await userService.GetLoggedUser(), Subtasks = new List<Subtask>(), Location = "", RecurrenceException = "", RecurrenceRule = "", RecurrenceID = 0 });
    }
    private async Task AddIssueToProject(Project project)
    {
        taskModal.OpenDialog(new Issue { Status = "Нова", Project = project, Assignee = await userService.GetLoggedUser(), Subtasks = new List<Subtask>(), Location = "", RecurrenceException = "", RecurrenceRule = "", RecurrenceID = 0 });
    }
    private async Task UpdateAfterManagementModalSubmitAsync()
    {

        projects = projectService.GetAllProjects();
        this.StateHasChanged();
    }
    private async Task DeleteIssue(Issue issue)
    {

        IssueService.DeleteTask(issue);

        projects = projectService.GetAllProjects();
        this.StateHasChanged();

    }

    private async Task EditIssue(Issue issue)
    {
        taskModal.OpenDialog(issue);
        //  managementModal.OpenDialog(applicationUser);
    }

}
