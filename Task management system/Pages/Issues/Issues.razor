@page "/Тasks"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Kanban
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.PdfExport
@using Syncfusion.XlsIO;
@using Task_management_system.Areas.Identity
@using Task_management_system.Data
@using Task_management_system.Interfaces
@using Task_management_system.Models
@using Task_management_system.Pages
@using Task_management_system.Pages.Shared
@using System.Globalization
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject IKeyValueService keyValueService
@inject IProjectService projectService
@inject IUserService userService
@inject IIssueService issueService
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Admin, User")]

<div class="content-wrapper">
    <div class="frame container">
        <img class="banner" src="img/iStock-1203930843.jpg" alt="Banner">
        <div class="bottom-left">

            <h3>Задачи</h3>
            <nav class="navbar navbar-expand">
                <!-- Left navbar links -->
                <ul class="navbar-nav float">
                    <li class="nav-item d-sm-inline-block">
                        <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="AddNewTaskClickHandler">Новa задача</button>
                    </li>
                </ul>
            </nav>
        </div>
    </div>

    <div class="m-3">
        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="@tabsClasses[0]" @onclick="() => ChangeTab(1)">Задачи</a>
            </li>
            <li class="nav-item">
                <a class="@tabsClasses[1]" @onclick="() => ChangeTab(2)">Kanban</a>
            </li>
            <li class="nav-item">
                <a class="@tabsClasses[2]" @onclick="() => ChangeTab(3)">Изглед по приоритет</a>
            </li>

        </ul>

        @switch (tabId)
        {

            case 1:

                <div class="row m-0">
                    <div class="col-sm-12">

                        <div class="project-issue-list">

                            @foreach (var project in projects)
                            {

                                <CollapsibleCard>
                                    <CardHeader>
                                        <li class="list-group-item rounded d-flex justify-content-between align-items-center" style="border-top-width: 1px; background-color: #f8f8ff">
                                            <div style="width: auto">
                                                @project.ProjectName
                                            </div>
                                            <div class="vr hide840"></div>
                                            @if (project.Issues.Count() != 0)
                                            {
                                                <div class="progress hide1100" style="width: 220px; border-radius: 20.25rem;">
                                                    <div class="progress-bar hide1100" role="progressbar" aria-label="Завършени задачи" style="width: @((project.Issues == null ? 0 : Convert.ToDouble(project.Issues.Where(x => x.Status == "Затворена").Count()) / (project.Issues.Count()) * 100).ToString().Replace(',', '.'))%; background-color: #4f9b00" aria-valuenow="@(project.Issues == null ? 0 : (project.Issues.Where(x => x.Status == "Затворена").Count() / project.Issues.Count()) * 100)" aria-valuemin="0" aria-valuemax="100"></div>
                                                </div>
                                                <label class="hide840" style="color: gray">@(project.Issues == null ? 0 : project.Issues.Where(x => x.Status == "Затворена").Count())/@(project.Issues == null ? 0 : project.Issues.Count()) завършени задачи </label>
                                            }
                                            else
                                            {
                                                <label class="hide840" style="color: gray">Няма добавени задачи </label>
                                            }
                                            <div class="vr hide840"></div>

                                            <div style="display: flex">
                                                <SfTooltip Position="Position.BottomCenter" Content="Експортиране на задачи" OpensOn="Hover">
                                                    <button type="button" class="btn btn-outline-warning waves-effect md-trigger m-1" @onclick="(() => ExportIssues(project))">
                                                        <i class="fa-solid fa-download"></i>
                                                    </button>
                                                </SfTooltip>
                                                <SfTooltip Position="Position.BottomCenter" Content="Импортиране на задачи" OpensOn="Hover">
                                                    <button type="button" class="btn btn-outline-warning waves-effect md-trigger m-1" @onclick="(() => ImportIssues(project))">
                                                        <i class="fa-solid fa-arrow-up-from-bracket"></i>
                                                    </button>
                                                </SfTooltip>
                                                <SfTooltip Position="Position.BottomCenter" Content="Нова задача" OpensOn="Hover">
                                                    <button type="button" class="btn btn-outline-primary waves-effect md-trigger m-1" @onclick="(() => AddIssueToProject(project))">
                                                        <i class="fa-solid fa-plus"></i>
                                                    </button>
                                                </SfTooltip>
                                            </div>

                                        </li>
                                    </CardHeader>

                                    <CardBody>
                                        @if (project.Issues != null)
                                            {
                                                @if (project.Issues.Count() != 0)
                                                {
                                                    @foreach (var issue in project.Issues)
                                                    {

                                                        <li class="list-group-item rounded d-flex justify-content-between align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px">
                                                            <div style="width: auto">
                                                                @issue.Subject
                                                            </div>
                                                            <div class="vr hide840"></div>
                                                            @if (issue.Subtasks != null)
                                                            {
                                                                @if (issue.Subtasks.Count() != 0)
                                                                {
                                                                    <div class="progress hide1100" style="width: 220px; border-radius: 20.25rem;">
                                                                        <div class="progress-bar hide1100" role="progressbarsubtasks" aria-label="Завършени подзадачи" style="width: @((issue.Subtasks == null ? 0 : Convert.ToDouble(issue.Subtasks.Where(x => x.Status == "Затворена").Count()) / (issue.Subtasks.Count()) * 100).ToString().Replace(',', '.'))%; background-color: #4f9b00" aria-valuenow="@(issue.Subtasks == null ? 0 : (issue.Subtasks.Where(x => x.Status == "Затворена").Count() / issue.Subtasks.Count()) * 100)" aria-valuemin="0" aria-valuemax="100"></div>
                                                                    </div>
                                                                    <label class="hide840" style="color: gray">@(issue.Subtasks == null ? 0 : (issue.Subtasks.Count() == 0 ? 0 : issue.Subtasks.Where(x => x.Status == "Затворена").Count()))/@(issue.Subtasks == null ? 0 : issue.Subtasks.ToArray().Length) завършени подзадачи </label>
                                                                }
                                                                else
                                                                {
                                                                    <label class="hide840" style="color: gray">Няма добавени подзадачи </label>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <label style="color: gray">Няма добавени подзадачи </label>
                                                            }
                                                            <div class="vr hide840"></div>

                                                            <div style="display: flex">
                                                                <SfTooltip Position="Position.BottomCenter" Content="Редактиране" OpensOn="Hover">
                                                                    <button type="button" class="btn btn-outline-warning waves-effect md-trigger m-1" @onclick="(() => EditIssue(issue))">
                                                                        <i class="fa-solid fa-pen-to-square"></i>
                                                                    </button>
                                                                </SfTooltip>
                                                                <SfTooltip Position="Position.BottomCenter" Content="Изтриване" OpensOn="Hover">
                                                                    <button type="button" class="btn btn-outline-danger waves-effect md-trigger m-1" @onclick="(() => DeleteIssue(issue))">
                                                                        <i class="fa-solid fa-trash"></i>
                                                                    </button>
                                                                </SfTooltip>
                                                            </div>

                                                        </li>
                                                    }
                                                }
                                                else
                                                {
                                                    <li class="list-group-item rounded d-flex align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px; text-align: center;">
                                                        <label style="color: gray">Няма задачи в този проект!</label>
                                                    </li>

                                                }
                                            }
                                            else
                                            {
                                                <li class="list-group-item rounded d-flex align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px; text-align: center;">
                                                    <label style="color: gray">Няма задачи в този проект!</label>
                                                </li>
                                            }
                                        
                                    </CardBody>
                                </CollapsibleCard>

                            }
                        @if (this.issues.Count() == 0 && this.projects.Count() == 0)
                        {
                            <li class="list-group-item rounded d-flex mt-3 align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px; text-align: center;">
                                <label style="color: gray">Няма създадени задачи!</label>
                            </li>
                        }
                        </div>
                    </div>
                </div>
                break;
            case 2:

                <SfKanban @ref="sfKanban" TValue="Issue" KeyField="Status" DataSource="@issues" AllowDragAndDrop="true">
                    <KanbanColumns>
                        <KanbanColumn HeaderText="Нова" KeyField="@(new List<string>() {"Нова"})"></KanbanColumn>
                        <KanbanColumn HeaderText="В изпълнение" KeyField="@(new List<string>() {"В изпълнение"})"></KanbanColumn>
                        <KanbanColumn HeaderText="За тестване" KeyField="@(new List<string>() {"За тестване"})"></KanbanColumn>
                        <KanbanColumn HeaderText="Върната за корекция" KeyField="@(new List<string>() {"Върната за корекция"})"></KanbanColumn>
                        <KanbanColumn HeaderText="Затворена" KeyField="@(new List<string>() {"Затворена"})"></KanbanColumn>
                    </KanbanColumns>
                    <KanbanEvents TValue="Issue" ActionComplete="@ActionCompleteHandler"></KanbanEvents>
                    <KanbanCardSettings HeaderField="Subject" ContentField="Description"></KanbanCardSettings>
                </SfKanban>
                break;
                case 3:
                    <div class="m-3">
                <div class="row m-0">
                    <div class="col-sm-12">

                        <div class="project-issue-list">

                            @foreach (var priorityType in priorityTypes)
                            {
                                <CollapsibleCard>
                                    <CardHeader>
                                        @if (priorityType.Name == "Висок")
                                        {
                                            <div class="e-message e-error p-2" style="font-size: 20px">@priorityType.Name</div>

                                        }
                                        else if (priorityType.Name == "Нормален")
                                        {
                                            <div class="e-message e-warning p-2" style="font-size: 20px">@priorityType.Name</div>

                                        }
                                        else
                                        {
                                            <div class="e-message e-primary p-2" style="font-size: 20px">@priorityType.Name</div>

                                        }
                                    </CardHeader>
                                    <CardBody>
                                        <ul class="list-group">
                                            @{
                                                var hasItems = false;
                                            }
                                            @foreach (var issue in issues)
                                            {
                                                @if (issue.Priority == priorityType.Name)
                                                {
                                                    hasItems = true;
                                                        <li class="list-group-item rounded d-flex justify-content-between align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px">
                                                            <div style="width: 220px">
                                                                @issue.Subject
                                                            </div>
                                                            <div class="vr hide840"></div>
                                                            @if (issue.Subtasks != null)
                                                            {
                                                                @if (issue.Subtasks.Count() != 0)
                                                                {
                                                                    <div class="progress hide1100" style="width: 220px; border-radius: 20.25rem;">
                                                                        <div class="progress-bar hide1100" role="progressbarsubtasks" aria-label="Завършени подзадачи" style="width: @((issue.Subtasks == null ? 0 : Convert.ToDouble(issue.Subtasks.Where(x => x.Status == "Затворена").Count()) / (issue.Subtasks.Count()) * 100).ToString().Replace(',', '.'))%; background-color: #4f9b00" aria-valuenow="@(issue.Subtasks == null ? 0 : (issue.Subtasks.Where(x => x.Status == "Затворена").Count() / issue.Subtasks.Count()) * 100)" aria-valuemin="0" aria-valuemax="100"></div>
                                                                    </div>
                                                                    <label class="hide840" style="color: gray">@(issue.Subtasks == null ? 0 : (issue.Subtasks.Count() == 0 ? 0 : issue.Subtasks.Where(x => x.Status == "Затворена").Count()))/@(issue.Subtasks == null ? 0 : issue.Subtasks.ToArray().Length) завършени подзадачи </label>
                                                                }
                                                                else
                                                                {
                                                                    <label class="hide840" style="color: gray">Няма добавени подзадачи </label>
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <label style="color: gray">Няма добавени подзадачи </label>
                                                            }
                                                            <div class="vr hide840"></div>

                                                            <div style="display: flex">
                                                                <SfTooltip Position="Position.BottomCenter" Content="Редактиране" OpensOn="Hover">
                                                                    <button type="button" class="btn btn-outline-warning waves-effect md-trigger m-1" @onclick="(() => EditIssue(issue))">
                                                                        <i class="fa-solid fa-pen-to-square"></i>
                                                                    </button>
                                                                </SfTooltip>
                                                                <SfTooltip Position="Position.BottomCenter" Content="Изтриване" OpensOn="Hover">
                                                                    <button type="button" class="btn btn-outline-danger waves-effect md-trigger m-1" @onclick="(() => DeleteIssue(issue))">
                                                                        <i class="fa-solid fa-trash"></i>
                                                                    </button>
                                                                </SfTooltip>
                                                            </div>

                                                        </li>
                                                }
                                            }
                                            @if (!hasItems)
                                            {
                                                <div class="list-group-item rounded d-flex justify-content-between align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px">
                                                    <label style="color: gray">Няма задачи с такъв приоритет!</label>
                                                </div>
                                            }
                                        </ul>
                                    </CardBody>
                                </CollapsibleCard>

                            }

                        </div>
                    </div>
                </div>
            </div>
                    break;
        }
    </div>
</div>





<ToastMsg @ref="toast" />

<IssueModal @ref="taskModal" CallbackAfterSubmit="UpdateAfterIssueModalSubmitAsync" />
<ImportIssuesModal @ref="importIssuesModal" CallbackAfterSubmit="UpdateAfterImportIssuesModalSubmitAsync" />


@code {
    //https://learn.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-7.0

    private List<Project> projects { get; set; }
    private List<Issue> issues { get; set; }
    private List<KeyValue> priorityTypes { get; set; }
    private SfKanban<Issue> sfKanban { get; set; }
    private IssueModal taskModal = new IssueModal();
    private ImportIssuesModal importIssuesModal = new ImportIssuesModal();
    private int tabId;
    private ToastMsg toast = new ToastMsg();
    string[] tabsClasses = new string[3];

    bool isLoggedUserAdmin = false;
    private ApplicationUser loggedUser { get; set; }

    private void UpdateData()
    {
        if (isLoggedUserAdmin)
        {
            projects = projectService.GetAllProjects();
            issues = issueService.GetAllIssues();
        }
        else
        {
            projects = projectService.GetAllProjects().Where(p => p.ProjectOwner.Id == loggedUser.Id
                                                                  || p.ProjectParticipants.Any(ap => ap.UserId == loggedUser.Id)).ToList();
            issues = issueService.GetAllIssues().Where(p => p.AssignedТo.Id == loggedUser.Id || p.Assignee.Id == loggedUser.Id).ToList();
        }
    }

    private void ChangeTab(int index)
    {
        switch (index)
        {
            case 1:
                tabsClasses[0] = "nav-link active";
                tabsClasses[1] = "nav-link";
                tabsClasses[2] = "nav-link";
                tabId = 1; break;
            case 2:
                tabsClasses[1] = "nav-link active";
                tabsClasses[0] = "nav-link";
                tabsClasses[2] = "nav-link";
                tabId = 2; break;
            case 3:
                tabsClasses[2] = "nav-link active";
                tabsClasses[0] = "nav-link";
                tabsClasses[1] = "nav-link";
                tabId = 3; break;
        }

    }
    protected override Task OnInitializedAsync()
    {
        tabsClasses[0] = "nav-link active";
        tabsClasses[1] = "nav-link";
        tabsClasses[2] = "nav-link";
        tabId = 1;
        isLoggedUserAdmin = userService.IsLoggedUserAdmin();
        loggedUser = userService.GetLoggedUser();
        UpdateData();
        
        priorityTypes = keyValueService.GetAllKeyValuesByKeyType("IssuePriority");
        return Task.CompletedTask;
    }
    public async void ActionCompleteHandler(Syncfusion.Blazor.Kanban.ActionEventArgs<Issue> args)
    {
        var result = issueService.UpdateIssue(args.ChangedRecords.FirstOrDefault());
        if (result.StartsWith("Успешно"))
        {
            toast.sfSuccessToast.Title = result;
            toast.sfSuccessToast.ShowAsync();
            UpdateData();
            await sfKanban.RefreshAsync();
            this.StateHasChanged();
        }
        else
        {
            toast.sfErrorToast.Title = result;
            toast.sfErrorToast.ShowAsync();
        }
        // Here you can customize your code
    }
    private async Task AddNewTaskClickHandler()
    {
        if (projects.Count() == 0)
        {
            toast.sfErrorToast.Title = "Моля създайте първо проект!";
            toast.sfErrorToast.ShowAsync();
        }
        else
        {
            taskModal.OpenDialog(new Issue { Status = "Нова", Assignee = userService.GetLoggedUser(), Subtasks = new List<Subtask>(), Location = "", RecurrenceException = "", RecurrenceRule = "", RecurrenceID = 0, Priority = "Нормален" });
        }
    }
    private async Task AddIssueToProject(Project project)
    {
        taskModal.OpenDialog(new Issue { Status = "Нова", Project = project, ProjectId = project.ProjectId, Assignee = userService.GetLoggedUser(), Subtasks = new List<Subtask>(), Location = "", RecurrenceException = "", RecurrenceRule = "", RecurrenceID = 0, Priority = "Нормален" });
    }

    private async Task ImportIssues(Project project)
    {
       importIssuesModal.OpenDialog(project);
    }

    public async Task ExportIssues(Project project)
    {
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;
            // Create a new workbook
            IWorkbook workbook = application.Workbooks.Create(1);
            // Get the first worksheet
            IWorksheet worksheet = workbook.Worksheets[0];

            // Set the column headers
            worksheet.Range["A1"].Text = "Име";
            worksheet.Range["B1"].Text = "Описание";
            worksheet.Range["C1"].Text = "Възложена на";
            worksheet.Range["D1"].Text = "Статус";
            worksheet.Range["E1"].Text = "Начална дата";
            worksheet.Range["F1"].Text = "Крайна дата";
            worksheet.Range["G1"].Text = "Приоритет";

            // Loop through the project's issues and write them to the worksheet
            for (int i = 0; i < project.Issues.Count(); i++)
            {
                Issue issue = project.Issues.ElementAt(i);

                worksheet.Range["A" + (i + 2)].Text = issue.Subject;
                worksheet.Range["B" + (i + 2)].Text = issue.Description;
                worksheet.Range["C" + (i + 2)].Text = issue.AssignedТo.UserName;
                worksheet.Range["D" + (i + 2)].Text = issue.Status;
                worksheet.Range["E" + (i + 2)].DateTime = issue.StartTime;
                worksheet.Range["F" + (i + 2)].DateTime = issue.EndTime;
                worksheet.Range["G" + (i + 2)].Text = issue.Priority;
            }

            // Auto-fit the columns
            worksheet.UsedRange.AutofitColumns();

            // Save the workbook to a memory stream
            MemoryStream stream = new MemoryStream();
            workbook.SaveAs(stream);
                  

            // Download the Excel file
            await JSRuntime.InvokeAsync<object>("saveAsFile", project.ProjectName.Replace(" ", "_").Replace("-", "_") + "_Задачи.xlsx", Convert.ToBase64String(stream.ToArray()));

            workbook.Close();
        }
    }

    private async Task UpdateAfterIssueModalSubmitAsync()
    {

        UpdateData();
        if (tabId == 2)
        {
            await sfKanban.RefreshAsync();
        }

        this.StateHasChanged();
    }

    private async Task UpdateAfterImportIssuesModalSubmitAsync()
    {

        UpdateData();
        if (tabId == 2)
        {
            await sfKanban.RefreshAsync();
        }

        this.StateHasChanged();
    }
    private async Task DeleteIssue(Issue issue)
    {

        var result = issueService.DeleteIssue(issue);
        if (result.StartsWith("Успешно"))
        {
            toast.sfSuccessToast.Title = result;
            toast.sfSuccessToast.ShowAsync();

            UpdateData();
            if (tabId == 2)
            {
                await sfKanban.RefreshAsync();
            }
            this.StateHasChanged();
        }
        else
        {
            toast.sfErrorToast.Title = result;
            toast.sfErrorToast.ShowAsync();
        }
        this.StateHasChanged();

    }

    private void EditIssue(Issue issue)
    {
        taskModal.OpenDialog(issue);
    }

}