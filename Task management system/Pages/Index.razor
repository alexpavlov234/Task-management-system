@using System.Text
@using Microsoft.AspNetCore.Identity
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Schedule
@using Task_management_system.Models
@using Task_management_system.Services
@inject IIssueService IssueService

@page "/"

<PageTitle>Моят ден</PageTitle>

@*
@if (loginState.IsLoggedIn.Equals(false))
{
    NavToLogin();
}
else
{
    <h1 style="text-align:center">Successful Login!</h1>
    <div style="text-align:center">
        <p> Thanks for logging in @loginState.loggedUser.Username!</p>
    </div>
}
*@
<AuthorizeView>
    <Authorized>

        <div class="frame container">
            <img class="banner" src="img/13186366_5125963-ai.svg" alt="Banner">
            <div class="bottom-left">Здравейте, @userFullName</div>
        </div>

        <div class="row" style="margin-right: 0px">
            @if (response != null)
            {


                <div class="col-xxl-6 col-xl-6 col-lg-12 pr-0" style="padding-right: 0px;">
                    <div class="custom-card">
                        <div class="card-body">
                            <h5 class="card-title">Времето</h5>
                            <div class="row">
                                <div class="col-sm-6 middle-align">
                                    <p class="weather-city">София</p>
                                    <p class="weather-temp">@((int)response.Temperature.Metric.Value + "°" + response.Temperature.Metric.Unit)</p>
                                    <p class="weather-info">@response.WeatherText</p>
                                </div>
                                <div class="col-sm-6 middle-align">
                                    <img class="weather-icon" src="@image" alt="Banner">
                                </div>
                            </div>

                        </div>
                        <div class="card-footer">
                            <div class="form-group">
                                <div class="text-right">
                                    <a href="@response.Link" class="btn btn-primary">По подробно</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>






            }
            <div class="col-xxl-6 col-xl-6 col-lg-12" style="padding-right: 0px;">
                <div class="custom-card">
                    <div class="card-body">
                        <h5 class="card-title">Задачи за деня</h5>
                        <SfSchedule TValue="Issue" Height="300px" Width="auto" SelectedDate="@DateTime.Now" CurrentView="View.Agenda" ShowHeaderBar="false">
                            <ScheduleEventSettings DataSource="@issues" AllowAdding="false" AllowDeleting="false"></ScheduleEventSettings>
                            <ScheduleViews>
                                <ScheduleView Option="View.Day"></ScheduleView>
                                <ScheduleView Option="View.Week"></ScheduleView>
                                <ScheduleView Option="View.WorkWeek"></ScheduleView>
                                <ScheduleView Option="View.Month"></ScheduleView>
                                <ScheduleView Option="View.Agenda"></ScheduleView>
                            </ScheduleViews>
                        </SfSchedule>
                    </div>
                    <div class="card-footer">
                        <div class="form-group">
                            <div class="text-right">
                                <a href="/Calendar" class="btn btn-primary">По подробно</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>

    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>


<style>
    .e-quick-popup-wrapper .e-popup-footer .e-event-edit, .e-quick-popup-wrapper .e-popup-footer .e-event-delete {
        display: none;
    }
</style>
@code {

    String userFullName = null;
    [Inject]
    private IUserService userService { get; set; }
    private List<Issue> issues { get; set; }
    CurrentCondition response;
    String image = "";
    String result = "";
    protected override async Task OnInitializedAsync()
    {
        issues = IssueService.GetAllIssues();
        if (await userService.GetLoggedUser() != null)
        {
            var user = await userService.GetLoggedUser();
            userFullName = user.FirstName + " " + user.LastName;
        }
        //CurrentConditions currentConditions = new CurrentConditions("bXyjKZghQjnIwBB2WKEHdNsVyZdaJECK", "bg-bg");
        //result = await currentConditions.Get(51097, false);
        //response = currentConditions.ConvertData(result);

        response = new CurrentCondition();
        response.Temperature = new Temperature();
        response.Temperature.Metric = new Metric();

        response.Temperature.Metric.Value = 32;
        response.Temperature.Metric.Unit = "C";
        response.WeatherText = "Слънчево с валежи";
        response.WeatherIcon = 14;
        response.Link = "https://www.accuweather.com/bg/bg/sofia/51097/weather-forecast/51097";

        image = "img/icons/" + response.WeatherIcon + ".svg";

    }
    public async void GetWeather()
    {

        StateHasChanged();
    }
}

