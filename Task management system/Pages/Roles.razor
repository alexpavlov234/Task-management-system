@page "/Management"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Syncfusion.PdfExport
@using Task_management_system.Areas.Identity
@using Task_management_system.Data
@using Task_management_system.Pages.Common
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@attribute [Authorize(Roles = "Admin")]

<div class="content-wrapper">
   
    <div class="card">
        
        <div class="card-header">
            <h3>Потребители</h3>
            <nav class="navbar navbar-expand">
                <!-- Left navbar links -->
                <ul class="navbar-nav float">
                    <li class="nav-item d-none d-sm-inline-block">
                        <SfTooltip Position="TooltipPosition.BottomCenter" Content="Добавяне на нов документ към заявлението" OpensOn="Hover">
                            <button type="button" class="btn btn-primary btn-outline-primary waves-effect md-trigger" @onclick="AddNewDocumentClickHandler" disabled="@(this.DisableAllFields)">Нов потребител</button>
                        </SfTooltip>
                    </li>
                    <li class="nav-item d-none d-sm-inline-block">
                        &nbsp;
                    </li>
                </ul>
            </nav>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-sm-12">
                    <SfGrid ID="usersGrid" DataSource="users" AllowSorting="true" AllowFiltering=true EnableAltRow="true" EnableHover="false"
                            AllowTextWrap="true" @ref="usersGrid" AllowSelection="true" Toolbar="@(new List<string>() { "ExcelExport", "PdfExport" })"
                            AllowExcelExport="true" AllowPdfExport="true" AllowPaging="true">
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>
                        <GridPageSettings PageCount="5" PageSize=20 PageSizes="true"></GridPageSettings>
                        <GridEvents OnToolbarClick="ToolbarClick" TValue="ApplicationUser"></GridEvents>
                        <GridColumns>
                            <GridColumn Width="30px">
                                <Template>
                                    <SfTooltip Position="TooltipPosition.BottomCenter" Content="Изтриване" OpensOn="Hover">
                                        <button type="button" class="btn btn-outline-danger waves-effect md-trigger" @onclick="(() => DeleteDocument(context as ApplicationUser))">
                                            <i class="fa-solid fa-trash"></i>
                                        </button>
                                    </SfTooltip>
                                </Template>
                            </GridColumn>
                             <GridColumn Width="30px">
                                <Template>
                                    <SfTooltip Position="TooltipPosition.BottomCenter" Content="Редактиране" OpensOn="Hover">
                                        <button type="button" class="btn btn-outline-warning waves-effect md-trigger" @onclick="(() => DeleteDocument(context as ApplicationUser))">
                                            <i class="fa-solid fa-pen-to-square"></i>
                                        </button>
                                    </SfTooltip>
                                </Template>
                            </GridColumn>

                            <GridColumn Field=@nameof(ApplicationUser.UserName) HeaderText="Потребителско име" IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(ApplicationUser.FirstName) HeaderText="Име" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(ApplicationUser.LastName) HeaderText="Фамилия" Width="120"></GridColumn>
                            <GridColumn Field=@nameof(ApplicationUser.Email) HeaderText="Имейл" Width="120"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>
        </div>
    </div>
</div>

<ToastMsg @ref="toast" />
@*
<h3>Роли</h3>
<SfGrid DataSource="@roles">
    <GridColumns>
        <GridColumn Type="ColumnType.Number" AllowFiltering="false" AllowEditing="false" AllowSorting="false" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Right" AutoFit="true">
            <Template>

                @{
                    var val = GetRowCounter(context as IdentityRole);
                    @val.Result
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(IdentityRole.Name) HeaderText="Име на роля"></GridColumn>

    </GridColumns>
</SfGrid>

<h3>Потребители</h3>
<SfGrid DataSource="@users" @ref="sfGrid" AllowPaging="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })" Height="315">
    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true"></GridEditSettings>
    <GridEvents OnActionBegin="ActionBegin" OnActionComplete="ActionComplete" TValue="ApplicationUser"></GridEvents>
    <GridColumns>
        <GridColumn Field=@nameof(ApplicationUser.UserName) HeaderText="Потребителско име" IsPrimaryKey="true" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(ApplicationUser.FirstName) HeaderText="Име" Width="120"></GridColumn>
        <GridColumn Field=@nameof(ApplicationUser.LastName) HeaderText="Фамилия" Width="120"></GridColumn>
        <GridColumn Field=@nameof(ApplicationUser.Email) HeaderText="Имейл" Width="120"></GridColumn>

    </GridColumns>
</SfGrid>*@
@code {
    //https://learn.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-7.0



    private ToastMsg toast = new ToastMsg();
    private bool documentDeleteConfirmed = false;
    private bool showDocumentConfirmDialog = false;

    private SfGrid<ApplicationUser> usersGrid = new SfGrid<ApplicationUser>();

    [Parameter]
    public bool DisableWhenProcedureIsCompleted { get; set; }

    [Parameter]
    public bool DisableAllFields { get; set; }


    [Inject]
    public IJSRuntime JsRuntime { get; set; }
    [Inject]
    public IUserService UserService { get; set; }


    public List<IdentityRole> roles { get; set; }
    public List<ApplicationUser> users { get; set; }
    public int RowCounter = 0;
    SfGrid<ApplicationUser> sfGrid { get; set; }
    [Inject]
    private Context context { get; set; }
    [Inject]
    private IHttpContextAccessor httpContextAccessor { get; set; }
    private async Task AddNewDocumentClickHandler()
    {
    }
    private async Task DeleteDocument(ApplicationUser applicationUser)
    {

        await userManager.DeleteAsync(applicationUser);
        StateHasChanged();

    }
    protected async Task ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "documentsGrid_pdfexport")
        {
            int temp = usersGrid.PageSettings.PageSize;
            usersGrid.PageSettings.PageSize = users.Count();
            await usersGrid.Refresh();
            PdfExportProperties ExportProperties = new PdfExportProperties();

            List<GridColumn> ExportColumns = new List<GridColumn>();
#pragma warning disable BL0005

            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.UserName), HeaderText = "Потребителско име", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.FirstName), HeaderText = "Име", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.LastName), HeaderText = "Фамилия", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.Email), HeaderText = "Имейл", Width = "80", TextAlign = TextAlign.Left });

#pragma warning restore BL0005

            ExportProperties.Columns = ExportColumns;
            ExportProperties.PageOrientation = PageOrientation.Landscape;
            ExportProperties.IncludeTemplateColumn = true;
            PdfTheme Theme = new PdfTheme();
            PdfThemeStyle RecordThemeStyle = new PdfThemeStyle()
                {
                    Font = new PdfGridFont() { IsTrueType = true, FontStyle = PdfFontStyle.Regular, FontFamily = FontFamilyPDF.fontFamilyBase64String }
                };

            PdfThemeStyle HeaderThemeStyle = new PdfThemeStyle()
                {
                    Font = new PdfGridFont() { IsTrueType = true, FontStyle = PdfFontStyle.Bold, FontFamily = FontFamilyPDF.fontFamilyBase64String }
                };
            Theme.Record = RecordThemeStyle;
            Theme.Header = HeaderThemeStyle;

            ExportProperties.Theme = Theme;
            ExportProperties.FileName = $"Потребители.pdf";

            await this.usersGrid.ExportToPdfAsync(ExportProperties);
            usersGrid.PageSettings.PageSize = temp;
            await usersGrid.Refresh();
        }
        else if (args.Item.Id == "usersGrid_excelexport")
        {
            ExcelExportProperties ExportProperties = new ExcelExportProperties();
            List<GridColumn> ExportColumns = new List<GridColumn>();
#pragma warning disable BL0005
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.UserName), HeaderText = "Потребителско име", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.FirstName), HeaderText = "Име", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.LastName), HeaderText = "Фамилия", Width = "80", TextAlign = TextAlign.Left });
            ExportColumns.Add(new GridColumn() { Field = nameof(ApplicationUser.Email), HeaderText = "Имейл", Width = "80", TextAlign = TextAlign.Left });

#pragma warning restore BL0005

            ExportProperties.Columns = ExportColumns;
            ExportProperties.FileName = $"Потребители.xlsx";
            await this.usersGrid.ExportToExcelAsync(ExportProperties);
        }
    }
    protected override void OnInitialized()
    {
        var users = UserService.GetAllUsers();
        var itemToRemove = users.Remove(users.Single(r => r.UserName == httpContextAccessor.HttpContext.User.Identity.Name));
        var roles = roleManager.Roles.ToList();
        this.users = users;
        this.roles = roles;
    }

    public async Task<int> GetRowCounter(IdentityRole val)
    {
        RowCounter = roles.IndexOf(val);
        return RowCounter + 1;
    }
    public async void ActionBegin(ActionEventArgs<ApplicationUser> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            // Triggers before editing operation starts
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            // Triggers before add operation starts
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers before cancel operation starts
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            var records = (await sfGrid.GetCurrentViewRecordsAsync()).ToList();
            foreach (var record in records)
            {
                if (userManager.FindByNameAsync(record.UserName) != null)
                {
                    await userManager.UpdateAsync(record);
                }
                else
                {
                    //TODO:Modal
                    await userManager.CreateAsync(record, "123456789");
                }
            }
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            var user = (await sfGrid.GetSelectedRecordsAsync()).FirstOrDefault();

            await userManager.DeleteAsync(user);



        }
    }

    public void ActionComplete(ActionEventArgs<ApplicationUser> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            // Triggers once editing operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            // Triggers once add operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {
            // Triggers once cancel operation completes
        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            //var records = SfDataGrid.View.Records;
            //foreach (var record in records)
            //{
            //    var rowdata = record.Data;
            //}


        }
        else if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            // Triggers once delete operation completes
        }
    }
}
