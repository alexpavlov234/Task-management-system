@page "/Search"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.PdfExport
@using Task_management_system.Areas.Identity
@using Task_management_system.Data
@using Task_management_system.Interfaces
@using Task_management_system.Models
@using Task_management_system.Pages
@using Task_management_system.Pages.Shared
@using System.Globalization
@using Task_management_system.Pages.Issues
@using Task_management_system.Pages.Projects
@using ChangeEventArgs = Microsoft.AspNetCore.Components.ChangeEventArgs
@inject RoleManager<IdentityRole> roleManager
@inject UserManager<ApplicationUser> userManager
@inject SignInManager<ApplicationUser> signInManager
@inject IUserService userService
@inject IKeyValueService keyValueService
@inject IProjectService projectService
@inject IIssueService issueService
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "Admin,User")]

<div class="content-wrapper">


    <div>
        @if (ShowHeader)
        {
            <div class="frame container">
                <img class="banner" style="transform: scale(3);" src="img/Search-01.svg" alt="Banner">
                <div class="bottom-left">

                    <h3>Търсене</h3>
                    <nav class="navbar navbar-expand">
                        <div class="form-control">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <div class="btn btn-outline-primary">
                                        <i class="fa-solid fa-magnifying-glass"></i>
                                    </div>
                                </div>
                                <input type="text" @bind-value="query" @bind-value:event="oninput" class="form-control" @onkeydown="@(e => { if (e.Key == "Enter") SearchInput(); })" />
                                <div class="input-group-append">
                                    <button type="button" @onclick="SearchInput" class="btn btn-primary">
                                        Търсене
                                    </button>
                                </div>

                            </div>
                        </div>
                    </nav>
                </div>
            </div>

            <div class="m-3">
                <div class="row m-0">
                    <div class="col-sm-12">
                        <h5>Резултат</h5>

                        <div class="project-issue-list">
                            <ul class="search-list">
                                @if (itemsResult.Any())
                                {
                                    @foreach (var item in itemsResult)
                                    {
                                        @if (item is Project project)
                                        {
                                            <li class="list-group-item rounded d-flex justify-content-between align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px">


                                                <div style="width: 100%; display: flex; align-items: center">
                                                    <div class="p-2">
                                                        <i class="fa-solid fa-clone fa-lg" style="color: darkcyan"></i>
                                                    </div>
                                                    &nbsp;
                                                    &nbsp;
                                                    <div style=" overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                                                        @project.ProjectName
                                                    </div>
                                                    
                                                </div>

                                                <div class="vr hide840 mx-1"></div>
                                                @if (project.Issues.Count() != 0)
                                                {
                                                    <div class="progress hide1100 mx-2" style="width: 220px; border-radius: 20.25rem;">
                                                        <div class="progress-bar hide1100" role="progressbar" aria-label="Завършени задачи" style="width: @((project.Issues == null ? 0 : Convert.ToDouble(project.Issues.Count(x => x.Status == "Затворена")) / (project.Issues.Count()) * 100).ToString().Replace(',', '.'))%; background-color: #4f9b00" aria-valuenow="@(project.Issues == null ? 0 : (project.Issues.Count(x => x.Status == "Затворена") / project.Issues.Count()) * 100)" aria-valuemin="0" aria-valuemax="100"></div>
                                                    </div>
                                                    <label class="hide840 mx-2" style="color: gray; text-align: center;">@(project.Issues == null ? 0 : project.Issues.Count(x => x.Status == "Затворена") / project.Issues.Count())/@(project.Issues == null ? 0 : project.Issues.ToArray().Length) завършени задачи </label>
                                                }
                                                else
                                                {
                                                    <label class="hide840 mx-2" style="color: gray; text-align: center;">Няма добавени задачи </label>
                                                }
                                                <div class="vr hide840 mx-1"></div>
                                                <div>
                                                    <div @key="project.ProjectId" style="display: flex">

                                                        @if (IsProjectEditable(project))
                                                        {
                                                            <SfTooltip Position="Position.BottomCenter" Content="Редактиране" OpensOn="Hover">
                                                                <button type="button" class="btn btn-outline-warning waves-effect md-trigger m-1" @onclick="(() => EditProject(project))">
                                                                    <i class="fa-solid fa-pen-to-square"></i>
                                                                </button>
                                                            </SfTooltip>


                                                            <SfTooltip Position="Position.BottomCenter" Content="Изтриване" OpensOn="Hover">
                                                                <button type="button" class="btn btn-outline-danger waves-effect md-trigger m-1" @onclick="(() => DeleteProject(project))">
                                                                    <i class="fa-solid fa-trash"></i>
                                                                </button>
                                                            </SfTooltip>
                                                        }
                                                        else
                                                        {
                                                            <SfTooltip Position="Position.BottomCenter" Content="Преглед" OpensOn="Hover">
                                                                <button type="button" class="btn btn-outline-primary waves-effect md-trigger m-1" @onclick="(() => EditProject(project))">
                                                                    <i class="fa-solid fa-eye"></i>
                                                                </button>
                                                            </SfTooltip>
                                                        }
                                                    </div>
                                                </div>
                                            </li>
                                        }
                                        else if (item is Issue issue)
                                        {
                                            <li class="list-group-item rounded d-flex justify-content-between align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px">

                                                <div style="width: 100%; display: flex; align-items: center">
                                                    <div class="p-2">
                                                        <i class="fa-solid fa-list-check fa-lg" style="color: darkcyan"></i>
                                                    </div>
                                                    &nbsp;
                                                    &nbsp;
                                                    <div style=" overflow: hidden; white-space: nowrap; text-overflow: ellipsis;">
                                                        @issue.Subject
                                                    </div>
                                                </div>
                                                <div class="vr hide840 mx-1"></div>
                                                @if (issue.Subtasks != null)
                                                {
                                                    @if (issue.Subtasks.Count() != 0)
                                                    {
                                                        <div class="progress hide1100 mx-2" style="width: 220px; border-radius: 20.25rem;">
                                                            <div class="progress-bar hide1100" role="progressbarsubtasks" aria-label="Завършени подзадачи" style="width: @((issue.Subtasks == null ? 0 : Convert.ToDouble(issue.Subtasks.Where(x => x.Status == "Затворена").Count()) / (issue.Subtasks.Count()) * 100).ToString().Replace(',', '.'))%; background-color: #4f9b00" aria-valuenow="@(issue.Subtasks == null ? 0 : (issue.Subtasks.Where(x => x.Status == "Затворена").Count() / issue.Subtasks.Count()) * 100)" aria-valuemin="0" aria-valuemax="100"></div>
                                                        </div>
                                                        <label class="hide840 mx-2" style="color: gray; text-align: center;">@(issue.Subtasks == null ? 0 : (issue.Subtasks.Count() == 0 ? 0 : issue.Subtasks.Where(x => x.Status == "Затворена").Count()))/@(issue.Subtasks == null ? 0 : issue.Subtasks.ToArray().Length) завършени подзадачи </label>
                                                    }
                                                    else
                                                    {
                                                        <label class="hide840 mx-2" style="color: gray; text-align: center;">Няма добавени подзадачи </label>
                                                    }
                                                }
                                                else
                                                {
                                                    <label style="color: gray">Няма добавени подзадачи </label>
                                                }
                                                <div class="vr hide840 mx-1"></div>

                                                <div style="display: flex">
                                                    <SfTooltip Position="Position.BottomCenter" Content="Редактиране" OpensOn="Hover">
                                                        <button type="button" class="btn btn-outline-warning waves-effect md-trigger m-1" @onclick="(() => EditIssue(issue))">
                                                            <i class="fa-solid fa-pen-to-square"></i>
                                                        </button>
                                                    </SfTooltip>
                                                    <SfTooltip Position="Position.BottomCenter" Content="Изтриване" OpensOn="Hover">
                                                        <button type="button" class="btn btn-outline-danger waves-effect md-trigger m-1" @onclick="(() => DeleteIssue(issue))">
                                                            <i class="fa-solid fa-trash"></i>
                                                        </button>
                                                    </SfTooltip>
                                                </div>

                                            </li>
                                        }
                                    }
                                }
                                else
                                {
                                    <li class="list-group-item rounded d-flex justify-content-between align-items-center" style="border-top-width: 1px; margin-top: 2px; margin-bottom: 2px">
                                        <label style="color: gray">Няма намерени съответствия!</label>
                                    </li>
                                }
                            </ul>
                        </div>
                    </div>
                </div>
            </div>



        }
        else
        {
            <nav class="navbar navbar-expand">
                <div class="form-control">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="btn btn-outline-primary">
                                <i class="fa-solid fa-magnifying-glass"></i>
                            </div>
                        </div>
                        <input type="text" @bind-value="query" @bind-value:event="oninput" class="form-control" @onkeydown="@(e => { if (e.Key == "Enter") SearchInput(); })" />
                        <div class="input-group-append">
                            <button type="button" @onclick="SearchInput" class="btn btn-primary">
                                Търсене
                            </button>
                        </div>

                    </div>
                </div>
            </nav>
        }

    </div>
</div>
<style>
    .project-issue-list ul li {
        opacity: 0;
        animation: fadeIn 0.5s ease-in-out forwards;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }
</style>
<ToastMsg @ref="toast" />
<ProjectModal @ref="projectModal" CallbackAfterSubmit="UpdateAfterManagementModalSubmitAsync" />
<IssueModal @ref="taskModal" CallbackAfterSubmit="UpdateAfterIssueModalSubmitAsync" />
<style>
    .form-control {
        padding: 0.2px 5px;
    }
</style>
@code {
    //https://learn.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-7.0


    private List<Project> projects { get; set; }
    private List<Issue> issues { get; set; }
    private List<object> itemsResult { get; set; }
    private ProjectModal projectModal = new();
    private ToastMsg toast = new();
    private IssueModal taskModal = new IssueModal();
    private string query = "";
    bool isLoggedUserAdmin = false;
    bool editProject = false;
    private ApplicationUser loggedUser { get; set; }
    [Parameter]
    public bool ShowHeader { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {

        loggedUser = userService.GetLoggedUser();
        isLoggedUserAdmin = userService.IsLoggedUserAdmin();
        UpdateData();

        string queryString = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var queryParams = System.Web.HttpUtility.ParseQueryString(queryString);
        var query = queryParams["q"];

        if (!string.IsNullOrEmpty(query))
        {
            // Remove the leading '?' from the query string
            var searchQuery = query;

            // Set the search field value
            this.query = searchQuery;
            StateHasChanged();
            // Perform the search
            SearchInput();
        }
    }

    private bool IsProjectEditable(Project project)
    {
        return isLoggedUserAdmin || project.ProjectOwner.Id == loggedUser.Id;
    }
    private void UpdateData()
    {

        itemsResult = new List<object>();
        if (isLoggedUserAdmin)
        {
            projects = projectService.GetAllProjects();
            issues = issueService.GetAllIssues();
        }
        else
        {
            projects = projectService.GetAllProjects().Where(p => p.ProjectOwner.Id == loggedUser.Id
                                                                  || p.ProjectParticipants.Any(ap => ap.UserId == loggedUser.Id)).ToList();
            issues = issueService.GetAllIssues().Where(p => p.AssignedТo.Id == loggedUser.Id || p.Assignee.Id == loggedUser.Id).ToList();
        }
    }

    private async Task UpdateAfterIssueModalSubmitAsync()
    {

        UpdateData();

        this.StateHasChanged();
    }
    private void UpdateAfterManagementModalSubmitAsync()
    {

        UpdateData();
        this.StateHasChanged();

    }
    private async Task DeleteIssue(Issue issue)
    {

        var result = issueService.DeleteIssue(issue);
        if (result.StartsWith("Успешно"))
        {
            toast.sfSuccessToast.Title = result;
            toast.sfSuccessToast.ShowAsync();

            this.StateHasChanged();
        }
        else
        {
            toast.sfErrorToast.Title = result;
            toast.sfErrorToast.ShowAsync();
        }

        projects = projectService.GetAllProjects();
        this.StateHasChanged();

    }

    private void EditIssue(Issue issue)
    {
        taskModal.OpenDialog(issue);
    }
    private void DeleteProject(Project project)
    {

        var result = projectService.DeleteProject(project.ProjectId);
        if (result.StartsWith("Успешно"))
        {
            toast.sfSuccessToast.Title = result;
            toast.sfSuccessToast.ShowAsync();


        }
        else
        {
            toast.sfErrorToast.Title = result;
            toast.sfErrorToast.ShowAsync();
        }
        if (isLoggedUserAdmin)
        {
            projects = projectService.GetAllProjects();
        }
        else
        {
            projects = projectService.GetAllProjects().Where(p => p.ProjectOwner.Id == loggedUser.Id
                                                                  || p.ProjectParticipants.Any(ap => ap.UserId == loggedUser.Id)).ToList();
        }
        this.StateHasChanged();

    }

    private void EditProject(Project project)
    {
        projectModal.OpenDialog(project);
    }

    public void SearchInput()
    {
        if (query != "")
        {
            if (ShowHeader)
            {
                var allItems = new List<object>();
                allItems.AddRange(this.projects.Cast<object>());
                allItems.AddRange(this.issues.Cast<object>());

                itemsResult = allItems.Where(item =>
                {
                    if (item is Project project)
                    {
                        return project.ProjectName.ToLower().Contains(query.ToLower()) || project.ProjectDescription.ToLower().Contains(query.ToLower());
                    }
                    else if (item is Issue issue)
                    {
                        return issue.Subject.ToLower().Contains(query.ToLower()) || issue.Description.ToLower().Contains(query.ToLower());
                    }
                    else
                    {
                        return false;
                    }
                }).ToList();
                this.StateHasChanged();
            }
            else
            {
                NavigationManager.NavigateTo($"/search?q={query}");
            }
        }
    }

}
